stages:
  - test
  - build
  - release
  - notify
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml
  - local: /.gitlab/.kaniko_template.yml
  - local: /.gitlab/.ssh_connection_alpine_template.yml

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

cache:
  key: frontend
  paths:
    - frontend/dist/frontend


sast:
  stage: test
  variables:
    SAST_DEFAULT_ANALYZERS: eslint,semgrep,nodejs-scan
    SAST_EXCLUDED_ANALYZERS: "spotbugs"

sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd frontend
    - >
      sonar-scanner
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${GL_SONAR_PROJECT_KEY_FRONTEND}
      -Dsonar.sources=.
      -Dsonar.host.url=${GL_SONAR_HOST_URL}
      -Dsonar.login=${GL_SONAR_LOGIN_FRONTEND}

build-docker-kaniko:
  stage: build
  extends: .kaniko_template
  script:
      - >-
        /kaniko/executor
        --context ${CI_PROJECT_DIR}/frontend
        --dockerfile $CI_PROJECT_DIR/frontend/Dockerfile
        --destination $CI_REGISTRY_IMAGE/$GL_DOCKER_IMAGE_FRONTEND_NAME:$CI_COMMIT_SHA

upload-docker-latest:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ '' ]
  cache: []
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/$GL_DOCKER_IMAGE_FRONTEND_NAME:$CI_COMMIT_SHA latest

deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  # если хотим сделать деплой по кнопке
  #rules:
  #  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #    when: manual
  #  - if: '$CI_COMMIT_BRANCH == "master"'
  #    when: manual
  extends:
    - .ssh_connection_alpine_template
  script:
    - ssh ${GL_DEV_USER}@${GL_DEV_HOST}
      "export "BACKEND_URL=http://backend:8080";
       export "CI_REGISTRY=${CI_REGISTRY}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
       export "GL_DOCKER_IMAGE_FRONTEND_NAME=${GL_DOCKER_IMAGE_FRONTEND_NAME}";
      /bin/bash -s " < ./frontend/compose_frontend_deploy.sh
  environment:
    name: production-frontend
    url: http://00.000.000.00:80/

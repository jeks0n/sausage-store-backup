variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - build
  - test
  - release
  - deploy

include:
  - local: /.gitlab/.kaniko_template.yml
  - local: /.gitlab/.ssh_connection_alpine_template.yml


build-docker-kaniko:
  stage: build
  extends: .kaniko_template
  script:
      - >-
        /kaniko/executor
        --context ${CI_PROJECT_DIR}/backend-report
        --dockerfile $CI_PROJECT_DIR/backend-report/Dockerfile
        --destination $CI_REGISTRY_IMAGE/$GL_DOCKER_IMAGE_REPORT_NAME:$CI_COMMIT_SHA

test-docker-image:
  image: $CI_REGISTRY_IMAGE/$GL_DOCKER_IMAGE_REPORT_NAME:$CI_COMMIT_SHA
  stage: test
  script:
      - python3 -m unittest

upload-docker-latest:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ '' ]
  cache: []
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/$GL_DOCKER_IMAGE_REPORT_NAME:$CI_COMMIT_SHA latest

deploy-backend-report:
  stage: deploy
  image: vault:1.11.3
  # если хотим сделать деплой по кнопке
  #rules:
  #  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #    when: manual
  #  - if: '$CI_COMMIT_BRANCH == "master"'
  #    when: manual
  extends:
    - .ssh_connection_alpine_template
  script:
    - scp ./docker-compose.yml ${GL_DEV_USER}@${GL_DEV_HOST}:/home/${GL_DEV_USER}/docker-compose.yml
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - export MONGO_URL="$(vault kv get -field=spring.data.mongodb.uri secret/sausage-store)"
    - ssh ${GL_DEV_USER}@${GL_DEV_HOST}
      "export "VERSION=${VERSION}";
       export MONGO_URL="${MONGO_URL}?${GL_MONGO_URI_SETTINGS}";
       export "CI_REGISTRY=${CI_REGISTRY}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
       export "GL_DOCKER_IMAGE_REPORT_NAME=${GL_DOCKER_IMAGE_REPORT_NAME}";
      /bin/bash -s " < ./backend-report/compose_report_deploy.sh
  environment:
    name: production-report
    url: http://00.000.000.00:80/

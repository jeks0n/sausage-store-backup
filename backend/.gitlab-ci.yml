include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Container-Scanning.gitlab-ci.yml
  - local: /.gitlab/.kaniko_template.yml
  - local: /.gitlab/.ssh_connection_alpine_template.yml

stages:
  - build
  - test
  - release
  - deploy

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  SAST_EXCLUDED_ANALYZERS: nodejs-scan,eslint-sast

cache: &global_cache
  key: backend
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository


build-backend-for-sast:
  stage: build
  script:
    - cd backend
    - mvn -X package -Dversion.application=${VERSION} -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -Dmaven.test.skip

build-docker-kaniko:
  stage: build
  extends: .kaniko_template
  script:
      - >-
        /kaniko/executor
        --context ${CI_PROJECT_DIR}/backend
        --dockerfile $CI_PROJECT_DIR/backend/Dockerfile
        --destination $CI_REGISTRY_IMAGE/$GL_DOCKER_IMAGE_BACKEND_NAME:$CI_COMMIT_SHA
        --build-arg "VERSION=$VERSION"

container_scanning:
  variables:
    GIT_STRATEGY: none
  stage: test
  variables:
    CS_IMAGE: $CI_REGISTRY_IMAGE/$GL_DOCKER_IMAGE_BACKEND_NAME:$CI_COMMIT_SHA

spotbugs-sast:
  stage: test
  cache:
    <<: *global_cache
    policy: pull
  variables:
    COMPILE: "false"
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

# ТАК Я И НЕ СМОГ ЗАСТАВИТЬ ЭТО РАБОТАТЬ,
# ПАРУ ДНЕЙ УБИЛ НА ЭТОГО МОНСТРА, ЧТО ЕМУ НЕ НРАВИТСЯ - НЕ ЗНАЮ. :(
#postman-api-test:
#  image:
#    name: postman/newman:alpine
#    entrypoint: [ '' ]
#  services:
#    - name: $CI_REGISTRY_IMAGE/$GL_DOCKER_IMAGE_BACKEND_NAME:$CI_COMMIT_SHA
#      alias: backend
#  cache: []
#  stage: test
#  variables:
#    POSTMAN_COLLECTION: ${CI_PROJECT_DIR}/backend/src/test/postman/sausage-store.postman_collection.json
#    POSTMAN_ENVIRONMENT: ${CI_PROJECT_DIR}/backend/src/test/postman/sausage-store.postman_environment.json
#    GIT_STRATEGY: clone
#    SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
#    SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
#    SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
#    SPRING_DATA_MONGODB_URI: ${SPRING_DATA_MONGODB_URI}
#    LOG_PATH: /opt/log/
#    REPORT_PATH: /opt/log/
#    CI_DEBUG_SERVICES: trace
#  script:
#    - newman --version
#    - npm install -g newman-reporter-html
#    - sed -i 's/BACKEND_URL/backend/g' ${POSTMAN_ENVIRONMENT}
#    - sleep 20
#    - newman run ${POSTMAN_COLLECTION} -e ${POSTMAN_ENVIRONMENT} --reporters cli,html --reporter-html-export report.html
#  artifacts:
#    when: always
#    paths:
#      - report.html

upload-docker-latest:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ '' ]
  cache: []
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/$GL_DOCKER_IMAGE_BACKEND_NAME:$CI_COMMIT_SHA latest

deploy-backend:
  stage: deploy
  image: vault:1.11.3
  # если хотим сделать деплой по кнопке
  #rules:
  #  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #    when: manual
  #  - if: '$CI_COMMIT_BRANCH == "master"'
  #    when: manual
  extends:
    - .ssh_connection_alpine_template
  script:
    - scp ./docker-compose.yml ${GL_DEV_USER}@${GL_DEV_HOST}:/home/${GL_DEV_USER}/docker-compose.yml
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - ssh ${GL_DEV_USER}@${GL_DEV_HOST}
      "export "VERSION=${VERSION}";
       export "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}";
       export "SPRING_DATASOURCE_USERNAME=$(vault kv get -field=spring.datasource.username secret/sausage-store)";
       export "SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=spring.datasource.password secret/sausage-store)";
       export "SPRING_DATA_MONGODB_URI=$(vault kv get -field=spring.data.mongodb.uri secret/sausage-store)";
       export "CI_REGISTRY=${CI_REGISTRY}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
       export "GL_DOCKER_IMAGE_BACKEND_NAME=${GL_DOCKER_IMAGE_BACKEND_NAME}";
      /bin/bash -s " < ./backend/compose_backend_deploy.sh
  environment:
    name: production-backend
    url: http://00.000.000.00:80/
